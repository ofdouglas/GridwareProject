// TODO
#include "definitions.pb.h"
#include "pb_encode.h"
#include "pb_decode.h"


/******************************************************************************
 * Helper Template Function -- Maps PB Message Type to Message Fields
 *****************************************************************************/
template <typename PbMsgType>
const pb_msgdesc_t* PbMsgGetMsgDescriptor() = delete;

// Specialization for gridware_FirmwareImagePage
// TODO: This function should be generated by the build script
template <>
const pb_msgdesc_t* PbMsgGetMsgDescriptor<gridware_FirmwareImagePage>() { 
    return gridware_FirmwareImagePage_fields; 
}

// Specialization for gridware_DeviceResponse
// TODO: This function should be generated by the build script
template <>
const pb_msgdesc_t* PbMsgGetMsgDescriptor<gridware_DeviceResponse>() { 
    return gridware_DeviceResponse_fields; 
}


/******************************************************************************
 * Helper Template Function -- Maps PB Message Type to Max Message Size
 *****************************************************************************/
template <typename PbMsgType>
size_t PbMsgGetMaxMsgSize() = delete;

// Specialization for gridware_FirmwareImagePage
// TODO: This function should be generated by the build script
template <>
size_t PbMsgGetMaxMsgSize<gridware_FirmwareImagePage>() { 
    return gridware_FirmwareImagePage_size; 
}

// Specialization for gridware_DeviceResponse
// TODO: This function should be generated by the build script
template <>
size_t PbMsgGetMaxMsgSize<gridware_DeviceResponse>() { 
    return gridware_DeviceResponse_size; 
}


/******************************************************************************
 * Main Template / User Interface for PB Encoding / Decoding
 *****************************************************************************/
template <typename PbMsgType>
class ProtoBufCodec {
public:
    int Encode(const PbMsgType* msg, pb_byte_t* buffer, size_t bufsize) {
        if (bufsize < GetMaxMsgSize()) {
            return -1;
        }

        pb_ostream_t stream = pb_ostream_from_buffer(buffer, bufsize);
        bool status = pb_encode(&stream, GetMsgDescriptor(), msg);

        return status ? stream.bytes_written : -1;
    }

    int Decode(PbMsgType* msg, const pb_byte_t* buffer, size_t bufsize) {
        pb_istream_t stream = pb_istream_from_buffer(buffer, bufsize);
        bool status = pb_decode(&stream, GetMsgDescriptor(), msg);

        return status ? 1 : -1;
    }

    size_t MaxEncodedSize() {
        return GetMaxMsgSize();
    }

private:
    size_t (* const GetMaxMsgSize)() = PbMsgGetMaxMsgSize<PbMsgType>;
    const pb_msgdesc_t* (* const GetMsgDescriptor)() = PbMsgGetMsgDescriptor<PbMsgType>;
};